from telebot import types 
import telebot
from pyqiwip2p import QiwiP2P
import json
import time
import threading


produc = {}
bills = []
BOT_TOKEN = "5572108825:AAFYNn_n2tSuoXMIvY7KaXW1_qqilRSn84A"
QIWI_PRIV_KEY = "eyJ2ZXJzaW9uIjoiUDJQIiwiZGF0YSI6eyJwYXlpbl9tZXJjaGFudF9zaXRlX3VpZCI6InBkOG5vci0wMCIsInVzZXJfaWQiOiI3OTYxNDg3Mzk0MyIsInNlY3JldCI6IjA2MzIzYzFlOWI2YTQ4ZGZjM2JjZTQ3NzI1MWMwNDFlOWRkYjk1YTNkZDZkNzJjNTZjMTEyNzNiNzNiNDU1ZDcifX0="




bot = telebot.TeleBot(token=BOT_TOKEN)
p2p = QiwiP2P(auth_key=QIWI_PRIV_KEY)

#SHOP#################################################################################################
##################################################################################################
def buy(message, List_):
    global produc
    if message.text == "‚úÖ":
        if List_['type'] == "–õ–∞–π–∫–∏":
            description = f"üîñ –í —Ç–µ—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –í–∞—à–µ–≥–æ –ø–æ—Å—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π —É–∫–∞–∑–∞–Ω –≤ –∑–∞–∫–∞–∑–µ, –±—É–¥—É—Ç –Ω–∞–∫—Ä—É—á–µ–Ω—ã –ª–∞–π–∫–∏. –í –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç —Å –í–∞–º–∏ —Å–º–æ–≥—É—Ç —Å–≤—è–∑–∞—Ç—å—Å—è, –∫–∞–∫ —á–µ—Ä–µ–∑ –±–æ—Ç–∞, —Ç–∞–∫ –∏ –≤ –ª—Å."
        else:
            description = f"üîñ –í —Ç–µ—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –í–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π —É–∫–∞–∑–∞–Ω –≤ –∑–∞–∫–∞–∑–µ, –±—É–¥—É—Ç –Ω–∞–∫—Ä—É—á–µ–Ω—ã –ø–æ–¥–ø–∏—Å—á–∏–∫–∏. –í –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç —Å –í–∞–º–∏ —Å–º–æ–≥—É—Ç —Å–≤—è–∑–∞—Ç—å—Å—è, –∫–∞–∫ —á–µ—Ä–µ–∑ –±–æ—Ç–∞, —Ç–∞–∫ –∏ –≤ –ª—Å."
        amount = int(int(List_['price'])*int(List_['count']))
        new_bill = p2p.bill(amount=amount, lifetime=1)
        bot.send_message(message.chat.id, f"—Å—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã {new_bill.pay_url}")
        produc[message.chat.id] = List_
        bills.append([new_bill.bill_id, message.chat.id, message.from_user.username])
    else:
        bot.send_message(message.chat.id, "‚ö†Ô∏è–û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞")
def result(message, List_):
    OK = types.ReplyKeyboardMarkup(row_width=5, resize_keyboard=True, one_time_keyboard=True).add(
        types.KeyboardButton(text='‚úÖ'),types.KeyboardButton(text='üö´'))
    List_['info'] = message.text
    msg = bot.send_message(message.chat.id, f"üì¶üì¶üì¶ –ó–∞–∫–∞–∑ üì¶üì¶üì¶\n\nüìç –ú–µ—Å—Å–µ–Ω–¥–∂–µ—Ä: {List_['msgr']}\nüìç –¢–∏–ø: {List_['type']}\nüìç –¶–µ–Ω–∞: {int(List_['price'])*int(List_['count'])} –∑–∞ {List_['count']}\n\n–ò–Ω—Ñ–æ:\n{List_['info']}", reply_markup=OK)
    bot.register_next_step_handler(msg, buy, List_)
def info(message, List_, counts):
    try:
        List_['count'] = int(message.text)
        msg = bot.send_message(message.chat.id, "üóí –î–∞–Ω–Ω—ã–µ –∫ –∑–∞–∫–∞–∑—É (—Å—Å—ã–ª–∫–∏ –∏ –í–∞—à–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è)")
        bot.register_next_step_handler(msg, result, List_)
    except:
        msg = bot.send_message(message.chat.id, f"üñá–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ª—É–≥ –∑–∞ {List_['price']} x (—à—Ç)", reply_markup=counts)
        bot.register_next_step_handler(msg, info, List_, counts)
def count(message, List_, prices):
    counts = types.ReplyKeyboardMarkup(row_width=5, resize_keyboard=True, one_time_keyboard=True).add(
    types.KeyboardButton(text='1'),types.KeyboardButton(text='2'),types.KeyboardButton(text='4'), types.KeyboardButton(text='10'), types.KeyboardButton(text='20'))
    if (message.text == "1–ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ - 199—Ä") or (message.text == "1K –ª–∞–π–∫–æ–≤ - 99—Ä"):
        if message.text == "1–ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ - 199—Ä":
           List_['price'],List_['type'] = 199, '–ü–æ–¥–ø–∏—Å–∫–∏'
        else:
            List_['price'],List_['type'] = 99, '–õ–∞–π–∫–∏'
        msg = bot.send_message(message.chat.id, f"üñá–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ª—É–≥ –∑–∞ {List_['price']} x (—à—Ç)", reply_markup=counts)
        bot.register_next_step_handler(msg, info, List_, counts)
    else:
        msg = bot.send_message(message.chat.id, "üí∞ –í—ã–±–æ—Ä —Ü–µ–Ω—ã —É—Å–ª—É–≥–∏ (1 —à—Ç)", reply_markup=prices)
        bot.register_next_step_handler(msg, count, List_, prices)
def price(message, messagers):
    if (message.text == "Telegram") or (message.text == "Instagram") or (message.text == "–í–∫–æ–Ω—Ç–∞–∫—Ç–µ"):
        prices = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True, one_time_keyboard=True).add(
            types.KeyboardButton(text='1–ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ - 199—Ä'))
        if message.text != "Telegram":
            prices.add(types.KeyboardButton(text='1K –ª–∞–π–∫–æ–≤ - 99—Ä'))
        msg = bot.send_message(message.chat.id, f"üí∞ –ú–µ—Å—Å–µ–Ω–¥–∂–µ—Ä: {message.text}\n –í—ã–±–æ—Ä —É—Å–ª—É–≥–∏ (1 —à—Ç)", reply_markup=prices)
        bot.register_next_step_handler(msg , count, {"msgr": message.text}, prices)
    else:
        msg = bot.send_message(message.chat.id, "üîé –í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä", reply_markup=messagers)
        bot.register_next_step_handler(msg, price, messagers)
@bot.message_handler(commands=['catalog'])
def handl(message):
    messagers = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True, one_time_keyboard=True).add(
        types.KeyboardButton(text='Telegram'),
        types.KeyboardButton(text='Instagram'),
        types.KeyboardButton(text='–í–∫–æ–Ω—Ç–∞–∫—Ç–µ'))
    msg = bot.send_message(message.chat.id, "üîé –í—ã–±–µ—Ä–∏—Ç–µ –ú–µ—Å—Å–µ–Ω–¥–∂–µ—Ä", reply_markup=messagers)
    bot.register_next_step_handler(msg, price, messagers)
#START#################################################################################################
##################################################################################################
@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(message.chat.id, "üõí –ö–∞—Ç–∞–ª–æ–≥ /catalog")

#SEND################################################################################################
##################################################################################################
def password(message):
    if message.text == "banlolkek1337":
        global OWNER_ID
        OWNER_ID = message.chat.id
        bot.send_message(message.chat.id, "–í—ã –ê–¥–º–∏–Ω")
        with open('data.txt', 'w') as outfile:
            json.dump({'admin' : message.chat.id}, outfile)
@bot.message_handler(commands=['Owner'])
def Owner(message):
    msg = bot.send_message(message.chat.id, "–ü–∞—Ä–æ–ª—å")
    bot.register_next_step_handler(msg, password)
#SEND#################################################################################################
##################################################################################################
def llsend(message, to_id):
    try:
        bot.send_message(to_id, message.text)
        bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
    except:
        bot.send_message(message.chat.id, "–ß–∞—Å —Å ID –Ω–µ –Ω–∞–π–¥–µ–Ω")
def getID(message):
    to_id = message.text
    msg = bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
    bot.register_next_step_handler(msg, llsend, to_id)
@bot.message_handler(commands=['send'])
def send(message):
    with open('data.txt') as json_file:
        data = json.load(json_file)
        if data['admin'] == int(message.chat.id):
            msg = bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏—Ç–µ ID")
            bot.register_next_step_handler(msg, getID)
#ACCEPT################################################################################################
##################################################################################################
def lBills():
    global produc
    try:
        while True:
            for b in bills:
                if str(p2p.check(bill_id=b[0]).status) == "PAID":
                    List_ = produc[b[1]]
                    bot.send_message(b[1],f'üéâüéâ–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!üéâüéâ\n\nüìç –ú–µ—Å—Å–µ–Ω–¥–∂–µ—Ä: {List_["msgr"]}\nüìç –¢–∏–ø: {List_["type"]}\nüìç –¶–µ–Ω–∞: {int(List_["price"])*int(List_["count"])} –∑–∞ {List_["count"]}\n\n–ò–Ω—Ñ–æ:\n{List_["info"]}')
                    p2p.reject(bill_id=b[0])
                    with open('data.txt') as json_file:
                        data = json.load(json_file)
                        bot.send_message(data['admin'], f"‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è–ù–æ–≤—ã–π –∑–∞–∫–∞–∑‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è\n\n–¶–µ–Ω–∞: {int(List_['price'])*int(List_['count'])}\n –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:\n     ID: {b[1]}\n     Tag: {b[2]}\n–¢–∏–ø: {List_['type']}\n\n–ò–Ω—Ñ–æ: {List_['info']}")
                    bills.remove(b)
                elif str(p2p.check(bill_id=b[0]).status) == "EXPIRED":
                    bills.remove(b)
                time.sleep(60)
    except:
        threading.Thread(target=lBills, args=()).start()

threading.Thread(target=lBills, args=()).start()
bot.polling()
